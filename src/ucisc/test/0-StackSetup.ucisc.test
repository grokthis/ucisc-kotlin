########
# Test simple stack setup and push/pop values
########

# Test definitions
#       start return
TEST    testMaxImm      2047
TEST    testMaxImmReg   65535
TEST    testPopStack    0
TEST    testPopVal      1024
TEST    testMemCopy1    10
TEST    testMemCopy2    10
TEST    testMemCopy3    65534
TEST    simplePush      2

# Test a simple push with the maximum immediate
testMaxImm:
    copy val 0 &stack
    copy val 2047 stack 0 push
    copy pc 0 pc
# Expect 2047, max signed 12-bit value

# Test a simple push with the maximum immediate via register
testMaxImmReg:
    copy val 0 &stack
    copy val 65535 &r2
    copy &r2 0 stack 0 push
    copy pc 0 pc
# Expect 65535

# Test a pop, stack should end up back at 0
testPopStack:
    copy val 0 &stack
    copy val 1024 stack 0 push
    copy stack 0 &r3 pop
    copy &stack 0 stack 0 push
    copy pc 0 pc
# Expect 0

# Test a pop, value should be popped
testPopVal:
    copy val 0 &stack
    copy val 1024 stack 0 push
    copy stack 0 &r3 pop
    copy &r3 0 stack
    copy pc 0 pc
# Expect 1024

# Test a copy with an offset, used for efficient memcopy
# Part 1 - check stack unchanged
testMemCopy1:
    copy val 0 &stack
    copy val 1024 stack 0 push
    copy val 10 stack 0 push
    copy &stack 1 &r2
    copy stack 0 r2 1 push
    copy pc 0 pc
# Expect stack to still be 10

# Test a copy with an offset, used for efficient memcopy
# Part 2 - check value copied
testMemCopy2:
    copy val 0 &stack
    copy val 1024 stack 0 push
    copy val 10 stack 0 push
    # r2 points to 1024
    copy &stack 1 &r2
    # Because we push with and offset of 1, it is effectively a copy and increment
    # Overwrites 1024 with 10
    copy stack 0 r2 1 push
    copy &stack 1 &stack
    copy pc 0 pc
## Expect copied value to be 10

# Test a copy with an offset, used for efficient memcopy
# Part 3 - check result address
testMemCopy3:
    copy val 0 &stack
    copy val 1024 stack 0 push
    copy val 10 stack 0 push
    copy &stack 1 &r2
    copy stack 0 r2 1 push
    copy &r2 0 stack 0
    copy pc 0 pc
## Expect copied value to be 65534

# Test a simple push, followed by simple store
simplePush:
    copy val 0 &stack
    copy val 1 stack 0 push
    copy val 2 stack
    copy pc 0 pc
# Expect 2